<?xml version="1.0" encoding="utf-8"?>
<feed xmlns="http://www.w3.org/2005/Atom">
  <title>Guachi&#39;s Blog</title>
  
  
  <link href="/atom.xml" rel="self"/>
  
  <link href="http://guachikuo.github.io/"/>
  <updated>2017-09-20T05:39:55.781Z</updated>
  <id>http://guachikuo.github.io/</id>
  
  <author>
    <name>Chia Chi Kuo</name>
    
  </author>
  
  <generator uri="http://hexo.io/">Hexo</generator>
  
  <entry>
    <title>Frontend Intermediate Course 6 &amp; 7</title>
    <link href="http://guachikuo.github.io/2017/09/20/feic6-7/"/>
    <id>http://guachikuo.github.io/2017/09/20/feic6-7/</id>
    <published>2017-09-19T17:17:45.000Z</published>
    <updated>2017-09-20T05:39:55.781Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;這次的作業也是比較簡單一點，我就決定把兩次作業一起寫完</p><h4 id="作業六的Github連結-返璞歸真：vanilla-js"><a href="#作業六的Github連結-返璞歸真：vanilla-js" class="headerlink" title="作業六的Github連結: 返璞歸真：vanilla js"></a>作業六的Github連結: <a href="https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw6.md" target="_blank" rel="external">返璞歸真：vanilla js</a></h4><p>什麼是Vanilla js?<br>&emsp;&emsp;其實就是指純的Javascript，不用library。 比如jQuery的<code>$(&#39;.class&#39;);</code>就改成<code>document.getElementsByClassName(&#39;class&#39;);</code>，這次的作業就是要我們試著把所有用到library的code都改成原生的javascript。<br><a id="more"></a><br>&emsp;&emsp;其實整個改起來並不難，網路很多資源，自己改起來的結果: <a href="https://github.com/guachikuo/website_project/tree/master/hw6_vanillajs" target="_blank" rel="external">hw6_github</a></p><p>我們就來比較一下jQuery和Vanilla js的優缺點</p><p>jQuery的優點?</p><ol><li>jQuery提供了寫起來的方便性。</li><li>瀏覽器兼容性，例如我自己在修改時遇到的問題，利用原生js，我這樣的寫法並不是每個瀏覽器都通用，我需要判斷更多條件。<figure class="codeblock codeblock--tabbed"><figcaption><span>example</span><ul class="tabs"><li class="tab active">javascript</li><li class="tab">javascript</li></ul></figcaption><div class="tabs-content"><figure class="highlight javascript" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><span class="line">$(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>{</span><br><span class="line">getdata();</span><br><span class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line"><span class="keyword">if</span>($(<span class="built_in">window</span>).scrollTop() + $(<span class="built_in">window</span>).height() &gt; $(<span class="built_in">document</span>).height() - <span class="number">100</span>) {</span><br><span class="line"><span class="keyword">if</span>(!isLoading){</span><br><span class="line">getdata();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><span class="line"><span class="built_in">document</span>.addEventListener(<span class="string">"DOMContentLoaded"</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>{</span><br><span class="line">getdata();</span><br><span class="line"><span class="built_in">window</span>.addEventListener(<span class="string">'scroll'</span>, <span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span><br><span class="line"></span>{</span><br><span class="line"><span class="keyword">if</span>(<span class="built_in">document</span>.documentElement.scrollTop + <span class="built_in">window</span>.innerHeight &gt; <span class="built_in">document</span>.documentElement.scrollHeight - <span class="number">100</span>) {</span><br><span class="line"><span class="keyword">if</span>(!isLoading){</span><br><span class="line">getdata();</span><br><span class="line">}</span><br><span class="line">}</span><br><span class="line">});</span><br><span class="line">});</span><br></pre></td></tr></tbody></table></figure></div></figure></li></ol><p>jQuery的缺點?</p><ol><li>jQuery 就算壓縮之後也要30kb <a href="https://mathiasbynens.be/demo/jquery-size" target="_blank" rel="external">jQuery file size</a>。</li><li>速度比較慢，<a href="http://vanilla-js.com/" target="_blank" rel="external">vanilla js</a>有直接做了速度比較。</li></ol><p>Vanilla js的優點?</p><ol><li>比起jQuery省了30kb大小，當你網頁規模很大或是在網路比較不好的地區，這個差距就非常多。</li><li>ops/sec上，vanilla js快了非常多。</li></ol><p>Vaniila js的缺點?</p><ol><li>瀏覽器兼容性問題需要比較下功夫。</li><li>團隊協作比較困難(使用jQuery的比較多)。</li><li>因為在程式的寫法比較麻煩一點，維護也比較困難。</li></ol><p>那為甚麼我們要用vanilla js?</p><ol><li>看完胡立老師的介紹，我覺得最重要的就是 <strong>trade-off</strong> 這個詞，我們去權衡和選擇。</li><li>考慮自己的專案規模，當你專案並不大，是不是就可以用維護的方便性去跟速度做交換，因為可能速度上使用者的感受沒啥差別。</li></ol><p>雖然這次的作業並不難，自己卻覺得是很重要的一課。 期許能夠利用這兩樣工具做出最好的權衡、選擇。</p><hr><p>&emsp;&emsp;作業七自己覺得蠻好玩的，學習寫出支援另一個語言，程式的部分不難，主要就是學一個新的東西。</p><h4 id="作業七的Github連結-走向國際：i18n"><a href="#作業七的Github連結-走向國際：i18n" class="headerlink" title="作業七的Github連結: 走向國際：i18n"></a>作業七的Github連結: <a href="https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw7.md" target="_blank" rel="external">走向國際：i18n</a></h4><p>甚麼是 i18n ?<br>i18n 的全名叫做<code>internationalization</code>，這個簡寫的由來就是因為 i 跟 n 中間有 18 個字母。</p><p>&emsp;&emsp;雖然這次作業其實要翻譯的也只有網站的標題，不過一般網站要翻譯的就非常多，所以通常都會有每個語言檔去負責翻譯，像是這次作業的<code>lang-en.js</code>，我們就是把標題翻譯成英文<br><img src="/2017/09/20/feic6-7/screenshot1.jpg" alt="screenshot1.jpg" title=""></p><p>html的部分就是加上三個點了會跑function的文字<br><img src="/2017/09/20/feic6-7/screenshot2.jpg" alt="screenshot2.jpg" title=""></p><p>Javascript就為他們更改標題，並且重新從twitchAPI抓取那語言的資料，之後刷新<br><img src="/2017/09/20/feic6-7/screenshot3.jpg" alt="screenshot3.jpg" title=""></p><p>很快就寫完了，最後就是<a href="https://github.com/guachikuo/website_project/tree/master/hw7" target="_blank" rel="external">hw7_github</a></p><p>聽說下次的作業複雜很多，有點期待!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;這次的作業也是比較簡單一點，我就決定把兩次作業一起寫完&lt;/p&gt;
&lt;h4 id=&quot;作業六的Github連結-返璞歸真：vanilla-js&quot;&gt;&lt;a href=&quot;#作業六的Github連結-返璞歸真：vanilla-js&quot; class=&quot;headerlink&quot; title=&quot;作業六的Github連結: 返璞歸真：vanilla js&quot;&gt;&lt;/a&gt;作業六的Github連結: &lt;a href=&quot;https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw6.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;返璞歸真：vanilla js&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;什麼是Vanilla js?&lt;br&gt;&amp;emsp;&amp;emsp;其實就是指純的Javascript，不用library。 比如jQuery的&lt;code&gt;$(&amp;#39;.class&amp;#39;);&lt;/code&gt;就改成&lt;code&gt;document.getElementsByClassName(&amp;#39;class&amp;#39;);&lt;/code&gt;，這次的作業就是要我們試著把所有用到library的code都改成原生的javascript。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frontend Intermediate Course 5</title>
    <link href="http://guachikuo.github.io/2017/09/18/feic5/"/>
    <id>http://guachikuo.github.io/2017/09/18/feic5/</id>
    <published>2017-09-18T10:12:47.000Z</published>
    <updated>2017-09-18T14:02:38.022Z</updated>
    
    <content type="html"><![CDATA[<h4 id="作業五的Github連結-placeholder-與-infinite-scroll"><a href="#作業五的Github連結-placeholder-與-infinite-scroll" class="headerlink" title="作業五的Github連結: placeholder 與 infinite scroll"></a>作業五的Github連結: <a href="https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw5.md" target="_blank" rel="external">placeholder 與 infinite scroll</a></h4><p>&emsp;&emsp;這次的作業老實說比較沒有頭緒一點，infinite scroll看完參考資料大概有點想法，想法就是當我scroll到最下面時，我就再去抓資料然後append，可以利用<code>limit</code>跟<code>offset</code>去做控制，limit=n在twitch api裡代表我這次要抓<strong>n個資料</strong>，offset的意思就是<strong>從第n+1個開始拿</strong>。 如此一來我可以利用變數index，當我讀一批假設limit=9的資料 offset就加9，所以下次會從第十筆開始拿以此類推。<br><a id="more"></a><br>&emsp;&emsp;首先就從判斷已經scroll到bottom開始著手，從<a href="https://stackoverflow.com/questions/3898130/check-if-a-user-has-scrolled-to-the-bottom" target="_blank" rel="external">Check if a user has scrolled to the bottom</a>這篇有人分享了怎麼去寫<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div></pre></td><td class="code"><pre><div class="line"></div><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line"><span class="keyword">if</span>($(<span class="built_in">window</span>).scrollTop() + $(<span class="built_in">window</span>).height() &gt; $(<span class="built_in">document</span>).height() - <span class="number">100</span>) &#123;</div><div class="line"><span class="comment">/*do something*/</span></div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><ol><li><strong>$(window).scrollTop()</strong> : 我現在看到視窗最上方和網頁最上方的距離</li><li><strong>$(window).height()</strong> : 我現在看到視窗的高度</li><li><strong>$(document).height()</strong> : 整個網頁的高度</li></ol><p>所以 <code>$(window).scrollTop() + $(window).height() &gt; $(document).height() - 100</code> 這段意思就是當我視窗已經scroll到已經小於100距離了，所以當我scroll到這個高度時就會做裡面的function<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line">getdata(); <span class="comment">/*抓第一批資料*/</span></div><div class="line">$(<span class="built_in">window</span>).scroll(<span class="function"><span class="keyword">function</span>(<span class="params"></span>) </span>&#123; </div><div class="line"><span class="keyword">if</span>($(<span class="built_in">window</span>).scrollTop() + $(<span class="built_in">window</span>).height() &gt; $(<span class="built_in">document</span>).height() - <span class="number">100</span>) &#123;</div><div class="line"><span class="keyword">if</span>(!isLoading)&#123; <span class="comment">/*如果上一筆已經讀完就是false*/</span></div><div class="line">getdata(); <span class="comment">/*抓下一批資料*/</span></div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;剩下的就是之前的code去做簡單修改。其中在中間我遇到一個狀況，我原本是這樣寫，發現出現了bug(我的getdata()會再呼叫getapi())<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div></pre></td><td class="code"><pre><div class="line"><span class="function"><span class="keyword">function</span> <span class="title">getApi</span>(<span class="params">call_back</span>)</span>&#123;</div><div class="line">省略</div><div class="line">$.ajax(&#123;</div><div class="line">method: <span class="string">"GET"</span>,</div><div class="line">url: apiURL,</div><div class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line">isLoading = <span class="literal">true</span>;</div><div class="line">call_back(<span class="literal">null</span>,data);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;後來才想到，我這樣寫，因為isloading會在確定讀到資料後才變成true，所以在我讀到資料前(isloading=false)，如果scroll一直往下拉，就會不斷的call getapi()造成錯誤，所以當我把isloading拿到ajax外面就解決了!</p><p>&emsp;&emsp;再來就是處理我覺得比較棘手的placeholder，一方面對css也沒有到很熟悉那種，我花了蠻多時間上網找資料跟測試，終於算是有點暴力把它寫出來。 一開始的做法我從javascript的角度去做，把兩張圖都放在同一個div下(有一張是placeholder,一張是抓下來的圖片)，原本先顯示placeholder的圖，然後給抓的圖<code>opacity=0</code>, 當我load好圖片時就會去跑<code>loadimage()</code>這個function，去改變那個它<code>opacity的值-&gt;1</code><br><figure class="codeblock codeblock--tabbed"><figcaption><span>example</span><ul class="tabs"><li class="tab active">html</li><li class="tab">css</li><li class="tab">javascript</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"channel"</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">img</span> <span class="attr">src</span>=<span class="string">" "</span> <span class="attr">onload</span>=<span class="string">"loadImage()"</span>/&gt;</span></span><br><span class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"placeholder"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br><span class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight css" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><span class="line"><span class="selector-class">.channel</span> {</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">height</span>: <span class="number">180px</span>;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.channel</span> <span class="selector-tag">img</span>{</span><br><span class="line"><span class="attribute">position</span>: relative;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">opacity</span>: <span class="number">0</span>; <span class="attribute">z-index</span>: <span class="number">1</span>;</span><br><span class="line"><span class="attribute">transition</span>: opacity <span class="number">0.5s</span> ease-out;</span><br><span class="line">}</span><br><span class="line"><span class="selector-class">.placeholder</span>{</span><br><span class="line"><span class="attribute">position</span>: absolute;</span><br><span class="line"><span class="attribute">width</span>: <span class="number">100%</span>; <span class="attribute">height</span>: <span class="number">100%</span>;</span><br><span class="line"><span class="attribute">z-index</span>: <span class="number">0</span></span><br><span class="line">background: <span class="built_in">url</span>(<span class="string">"../picture/preview_320x180.jpg"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">loadImage</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="keyword">var</span> x = <span class="built_in">document</span>.getElementsByClassName(<span class="string">"channel"</span>)[i];</span><br><span class="line">x.getElementsByTagName(<span class="string">"IMG"</span>)[<span class="number">0</span>].style.opacity = <span class="number">1</span>;</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p><p>&emsp;&emsp;不過後來在看過胡立老師的做法之後，發現我這樣寫麻煩很多，找到不少可以修的地方</p><ol><li>其實我只要在這樣寫即可<code>&lt;img src=&quot; &quot; onload=&quot;this.style.opacity=1&quot;/&gt;</code>，直接連javscript都不用再多寫一個function出來。</li><li>可以使用<code>:before</code>這個Pseudo Element，它可以讓我不用多建一個<code>&lt;div class=&quot;placeholder&quot;&gt;&lt;/div&gt;</code>也有一樣效果，意思就是我不需要在html程式碼中寫出來，但是他還是會透過<code>before</code>呈現出來，詳細的內容可以看<a href="https://css-tricks.com/almanac/selectors/a/after-and-before/" target="_blank" rel="external">css tricks</a>和<a href="https://developer.mozilla.org/zh-TW/docs/Web/CSS/::before" target="_blank" rel="external">before介紹</a>。</li><li>我在使用z-index時，發現一直沒有達到我想要的效果，z-index=1不會蓋過去z-index=0，一查才發現原來<strong>z-index一定要搭配position才有作用</strong>，placeholder那邊我本來就有寫position: absolute，因為我要讓他跟我的img在同個位子。 但是img就沒有寫上position: relative，也難怪z-index一直沒有作用</li><li>雖然我們使用了placeholder，但是placeholder也是圖片，也需要載入時間，如果我們想要優化它，一個方法就是自己搬到資料夾底下，另一個方法就可以使用<a href="https://www.base64-image.de/" target="_blank" rel="external"><strong>base64</strong></a>，它的原理就是把圖片encode成字串的形式。 缺點就是它會把圖片大小變大，而大圖片也無法使用。</li></ol><p>又是學到很多東西的一次作業: <a href="https://github.com/guachikuo/website_project/tree/master/hw5" target="_blank" rel="external">hw5_github</a></p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;作業五的Github連結-placeholder-與-infinite-scroll&quot;&gt;&lt;a href=&quot;#作業五的Github連結-placeholder-與-infinite-scroll&quot; class=&quot;headerlink&quot; title=&quot;作業五的Github連結: placeholder 與 infinite scroll&quot;&gt;&lt;/a&gt;作業五的Github連結: &lt;a href=&quot;https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw5.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;placeholder 與 infinite scroll&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;這次的作業老實說比較沒有頭緒一點，infinite scroll看完參考資料大概有點想法，想法就是當我scroll到最下面時，我就再去抓資料然後append，可以利用&lt;code&gt;limit&lt;/code&gt;跟&lt;code&gt;offset&lt;/code&gt;去做控制，limit=n在twitch api裡代表我這次要抓&lt;strong&gt;n個資料&lt;/strong&gt;，offset的意思就是&lt;strong&gt;從第n+1個開始拿&lt;/strong&gt;。 如此一來我可以利用變數index，當我讀一批假設limit=9的資料 offset就加9，所以下次會從第十筆開始拿以此類推。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frontend Intermediate Course 4 (二)</title>
    <link href="http://guachikuo.github.io/2017/09/18/feic4-2/"/>
    <id>http://guachikuo.github.io/2017/09/18/feic4-2/</id>
    <published>2017-09-17T16:43:17.000Z</published>
    <updated>2017-09-18T12:45:20.786Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;這次的作業個人覺得是個很龐大的東西，不是要做的東西很多，是要學的新東西真的不少，所以決定多開一篇出來紀錄一下。</p><p>&emsp;&emsp;1. 首先是談到AJAX這個詞中的Asychronous，它是一個大重點，中文的意思就是非同步，如果今天是同步的話會發生甚麼事? 假設有一段code<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"hi"</span>);</div><div class="line">跟Twitch API拿資料;</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"ya"</span>);</div></pre></td></tr></table></figure></p><a id="more"></a><p>&emsp;&emsp;如果是同步，程式就會一直留在第二行等response，才會繼續跑，整個網頁開起來就會很像當掉的樣子。但這不會是我們要的樣子，所以我們會需要非同步，在等資料的同時先去做其他事，等資料來了我們再去接收。這時候又有個問題，它在做其他事時，怎麼知道甚麼時候要去拿資料? <strong>是因為有個callback function</strong><br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(<span class="string">"hi"</span>);</div><div class="line">twitchAPI(data, funuction(response)&#123;</div><div class="line"><span class="keyword">do</span> something</div><div class="line">&#125;);</div><div class="line"><span class="built_in">console</span>.log(<span class="string">"ya"</span>);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;後面那個function(response)就是callback function，當我送完request就先往下做，等到respnse來了，我再去執行callback function。</p><p>&emsp;&emsp;2. 這篇作業一開始寫起來會覺得，那我不就可以到處要資料嗎? 其實並不是所有的api都可以直接拿，假如我隨便跟一個網站請求資料，通常會收到<br><img src="/2017/09/18/feic4-2/screenshot1.jpg" alt="screenshot1.jpg" title=""><br>那是因為browser有個安全性考量的限制<a href="https://developer.mozilla.org/zh-TW/docs/Web/JavaScript/Same_origin_policy_for_JavaScript" target="_blank" rel="external">Same Origin Policy</a>，意思是browser有個限制，今天你要送request的時候只能送給同domain name的，如果你要跨網域送request的話，browser會擋掉，就會出現上圖的錯誤。</p><p>如果想要突破，方法有兩種<br>(1) <strong>JSONP (JSON with Padding)</strong> : 它的原理就是<code>&lt;script&gt;</code>標籤可以跨網域。 跨網域的限制上還是有些例外，例如<code>&lt;script&gt;,&lt;img&gt;</code>這些，我們在寫網頁的時候有時候會需要別人網站的圖片，或是他們的jacascript <code>&lt;script src=&quot;https://ajax.googleapis.com/ajax/libs/jquery/3.2.1/jquery.min.js&quot;&gt;</code> ，如果這些東西也限制，就真的太不方便。 twitch api 這邊也提供了利用JSONP送request給他們的方法<br><img src="/2017/09/18/feic4-2/screenshot2.jpg" alt="screenshot2.jpg" title=""><br>我們就來試試，看看結果<br><figure class="codeblock codeblock--tabbed"><figcaption><span>example</span><ul class="tabs"><li class="tab active">html</li><li class="tab">javascript</li></ul></figcaption><div class="tabs-content"><figure class="highlight html" style="display: block;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><span class="line"><span class="tag">&lt;<span class="name">script</span> <span class="attr">src</span>=<span class="string">"https://api.twitch.tv/kraken/streams/?game=League%20of%20Legends&amp;client_id=6515p95jb9xihs3dg4w1d05ck6vy8n&amp;limit=2&amp;callback=hello"</span>&gt;</span><span class="undefined"></span><span class="tag">&lt;/<span class="name">script</span>&gt;</span></span><br></pre></td></tr></tbody></table></figure><figure class="highlight javascript" style="display: none;"><table><tbody><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><span class="line"><span class="function"><span class="keyword">function</span> <span class="title">hello</span>(<span class="params"></span>)</span>{</span><br><span class="line"><span class="built_in">console</span>.log(<span class="string">"hihihihi"</span>);</span><br><span class="line">}</span><br></pre></td></tr></tbody></table></figure></div></figure></p><img src="/2017/09/18/feic4-2/screenshot3.jpg" alt="screenshot3.jpg" title=""><p>&emsp;&emsp;JSONP另一個重要的是<strong>它會需要server-side那邊做支援</strong>，像是Twitch就有提供支援，callback funtion裡call的是甚麼，它就會執行甚麼，如果我今天想要執行的東西，server那邊不支援也沒有用。</p><p>(2) <strong>CORS(Cross-Origin Resource Sharing)</strong> : 這裡有一篇文章寫得很清楚<a href="https://developer.mozilla.org/zh-TW/docs/Web/HTTP/Access_control_CORS" target="_blank" rel="external">HTTP 存取控制（CORS</a>。 當我們Cross-Origin requests時，會透過CORS做控制，當中的repsponse header(以twitch為例)<br><img src="/2017/09/18/feic4-2/screenshot4.jpg" alt="screenshot4.jpg" title=""><br>我們可以看到第一行是<code>access-control-allow-origin:*</code>，* 表示允許任何網域跨站存取資源。 那如果只允許來自kuoandy1.com的request，就會變成回傳<code>access-control-allow-origin: kuoandy1.com</code>。</p><p>&emsp;&emsp;後面還有提到<code>preflight request</code>，如果只是簡單請求(文章中有提到哪些條件是簡單請求)就不會觸發preflight，那如果今天符合preflight request，”preflight request會先以 HTTP 的 OPTIONS 方法送出請求到另一個網域，確認後續真實請求是否可安全送出，由於跨站請求可能會攜帶使用者資料，所以要先進行預檢請求”。</p><p>&emsp;&emsp;<strong>結論來說server端那邊還是要開權限給我們，我們才能抓取他們的資料。 他們如果不開，我們怎樣做都沒有用的!</strong></p><p>最後分享兩篇文章</p><ol><li><a href="http://eddychang.me/blog/16-javascript/61-callback-example.html" target="_blank" rel="external">Callback function</a></li><li><a href="http://eddychang.me/blog/16-javascript/57-node-js-error-first-callback.html" target="_blank" rel="external">Error-first Callback </a></li></ol>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;這次的作業個人覺得是個很龐大的東西，不是要做的東西很多，是要學的新東西真的不少，所以決定多開一篇出來紀錄一下。&lt;/p&gt;
&lt;p&gt;&amp;emsp;&amp;emsp;1. 首先是談到AJAX這個詞中的Asychronous，它是一個大重點，中文的意思就是非同步，如果今天是同步的話會發生甚麼事? 假設有一段code&lt;br&gt;&lt;figure class=&quot;highlight javascript&quot;&gt;&lt;table&gt;&lt;tr&gt;&lt;td class=&quot;gutter&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;1&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;2&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;3&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;td class=&quot;code&quot;&gt;&lt;pre&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;hi&quot;&lt;/span&gt;);&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;跟Twitch API拿資料;&lt;/div&gt;&lt;div class=&quot;line&quot;&gt;&lt;span class=&quot;built_in&quot;&gt;console&lt;/span&gt;.log(&lt;span class=&quot;string&quot;&gt;&quot;ya&quot;&lt;/span&gt;);&lt;/div&gt;&lt;/pre&gt;&lt;/td&gt;&lt;/tr&gt;&lt;/table&gt;&lt;/figure&gt;&lt;/p&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frontend Intermediate Course 4 (一)</title>
    <link href="http://guachikuo.github.io/2017/09/17/feic4/"/>
    <id>http://guachikuo.github.io/2017/09/17/feic4/</id>
    <published>2017-09-16T16:26:17.000Z</published>
    <updated>2017-09-18T11:34:12.515Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;這次的作業是我一直很想學的東西，利用jQuery的AJAX(Asychronous Javascript and XML)去跟api串接資料，簡單說就是去提供API的地方抓資料來給自己開發。 AJAX這個名詞算是聽過很多次，這次總算要實際去學，內心是非常興奮。 </p><h4 id="作業四的Github連結-從假資料到真資料：Ajax-與-API-串接"><a href="#作業四的Github連結-從假資料到真資料：Ajax-與-API-串接" class="headerlink" title="作業四的Github連結: 從假資料到真資料：Ajax 與 API 串接"></a>作業四的Github連結: <a href="https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw4.md" target="_blank" rel="external">從假資料到真資料：Ajax 與 API 串接</a></h4><p>&emsp;&emsp;這次作業要抓的資料，是要從Twitch裡抓取，至於API則是選擇<a href="https://dev.twitch.tv/docs/v5/reference/streams#get-live-streams" target="_blank" rel="external">Get Live Streams</a>。不過在抓資料前，需要先跟他們申請拿到<code>client_id</code>，不然他們是不會給你資料的，至於怎麼申請，網站裡有說明!<br><a id="more"></a><br>&emsp;&emsp;因為自己沒有使用過AJAX的經驗，所以先上網大量找資料給自己基礎的概念，幸運的從<a href="http://peggyloveslearning.blogspot.tw/2017/05/frontend-intermediate-course-homework-4.html" target="_blank" rel="external">Peggy’s Learning Note</a> (她是之前直接參加胡立老師課程的學生)裡找到推薦兩個影片<a href="https://www.youtube.com/watch?v=DxdTWIYqIzU" target="_blank" rel="external">Ajax/JSON 教學</a>和<a href="https://www.youtube.com/watch?v=OtIOxstrhzY" target="_blank" rel="external">透過jQuery $ajax串接json資料</a>，看完後其實基礎的感覺已經有了，就先自己寫寫試試最簡單抓資料，第二部影片有推薦一個<a href="https://randomuser.me/documentation" target="_blank" rel="external">Random User Generator API</a>的網站，從這邊下手<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line">$.ajax(&#123;</div><div class="line">method: <span class="string">"GET"</span>,</div><div class="line">url: <span class="string">'https://randomuser.me/api/'</span>,</div><div class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"><span class="built_in">console</span>.log(data);</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>也順利地抓到JSON格式的資料<br><img src="/2017/09/17/feic4/screenshot1.jpg" alt="screenshot1.jpg" title=""></p><p>那現在假如我們要抓取更裡面的資訊，比如第一個人的email好了<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div></pre></td><td class="code"><pre><div class="line"><span class="built_in">console</span>.log(data.results[<span class="number">0</span>].email);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;這串的意思是: data資料中有info和result，而我要的是result裡第一個人的資料，那因為result是array所以就<code>result[0]</code>，最後選出email，結果就出來了</p><img src="/2017/09/17/feic4/screenshot2.jpg" alt="screenshot2.jpg" title=""><p>&emsp;&emsp;嘗試成功後就要正式開始往作業邁進，我第一件事想要嘗試的是去抓五張實況圖，然後丟進去我的網頁中，抓五張實況圖因為有了前面的背景知識其實不難<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div></pre></td><td class="code"><pre><div class="line">$(<span class="built_in">document</span>).ready(<span class="function"><span class="keyword">function</span>(<span class="params"></span>)</span>&#123;</div><div class="line"><span class="keyword">var</span> api = <span class="string">"https://api.twitch.tv/kraken/streams/"</span>;</div><div class="line"><span class="keyword">var</span> game = <span class="string">"League%20of%20Legends"</span> ;</div><div class="line"><span class="keyword">var</span> client_id = <span class="string">"6515p95jb9xihs3dg4w1d05ck6vy8n"</span>;</div><div class="line"><span class="keyword">var</span> limit = <span class="number">5</span>;</div><div class="line"><span class="keyword">var</span> apiURL = api + <span class="string">"?game="</span> + game + <span class="string">"&amp;client_id="</span> + client_id + <span class="string">"&amp;limit="</span> + limit; </div><div class="line">$.ajax(&#123;</div><div class="line">method: <span class="string">"GET"</span>,</div><div class="line">url: apiURL,</div><div class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;limit;i++)&#123;</div><div class="line"><span class="keyword">var</span> preview = data.streams[i].preview.medium;</div><div class="line"><span class="built_in">console</span>.log(preview);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;因為我希望我的網頁靈活度高一點，就不把apiURL寫死，用一些變數去串字串，這樣要調整也比較方便，<code>limit=n</code>的意思就是我只抓前面n個資料。 後面就是前面的概念做一點小延伸，至於想要的圖片在哪個資料中，就自己去慢慢找了，可以直接去twtich網站看他們原始碼會找得更快!<br><img src="/2017/09/17/feic4/screenshot3.jpg" alt="screenshot3.jpg" title=""></p><p>&emsp;&emsp;到這邊原本想說一步一步慢慢來，不過在這邊抓資料的方法都一樣了，就決定一次全部把它寫完。 在第二部影片有教到怎麼把ajax抓到的資料丟進去html中，就是利用<code>append</code>，所以我把html中broadcast的部分都刪掉，剩下<br><figure class="highlight html"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div></pre></td><td class="code"><pre><div class="line"><span class="tag">&lt;<span class="name">body</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">h1</span> <span class="attr">class</span>=<span class="string">"head_text"</span>&gt;</span>Twitch<span class="tag">&lt;/<span class="name">h1</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"container"</span>&gt;</span></div><div class="line"><span class="tag">&lt;<span class="name">div</span> <span class="attr">class</span>=<span class="string">"row"</span>&gt;</span><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">div</span>&gt;</span></div><div class="line"><span class="tag">&lt;/<span class="name">body</span>&gt;</span></div></pre></td></tr></table></figure></p><p>&emsp;&emsp;row下面的20個broadcast就用Javascript去append。 不過在append之前，我發現我之前的寫法會造成一個問題，因為我的圖片是用css的background，所以就算我每append一個broadcast，就去改css中它的background圖檔，但是前一個background就會被後一個append的蓋掉，所以最後大家的圖都長一樣，當然我也可以把每個class的名稱都改不一樣，但這不是我想要的結果而且很麻煩，也有可能其實也有方便的解法，只是我暫時不知道。<br>&emsp;&emsp;我現在的解法就是把圖片從backgorund拿走，重新在div下新增<code>&lt;img&gt;</code>，這樣我就可以靈活地放圖片了! 再來就可以開始用JS去append<br><figure class="highlight javascript"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div><div class="line">17</div><div class="line">18</div><div class="line">19</div><div class="line">20</div><div class="line">21</div><div class="line">22</div><div class="line">23</div><div class="line">24</div><div class="line">25</div><div class="line">26</div><div class="line">27</div><div class="line">28</div><div class="line">29</div><div class="line">30</div><div class="line">31</div></pre></td><td class="code"><pre><div class="line">$.ajax(&#123;</div><div class="line">method: <span class="string">"GET"</span>,</div><div class="line">url: apiURL,</div><div class="line">success: <span class="function"><span class="keyword">function</span>(<span class="params">data</span>) </span>&#123;</div><div class="line"><span class="keyword">for</span>(i=<span class="number">0</span>;i&lt;limit;i++)&#123;</div><div class="line"><span class="keyword">var</span> link = data.streams[i].channel.url;</div><div class="line"><span class="keyword">var</span> preview = data.streams[i].preview.medium;</div><div class="line"><span class="keyword">var</span> logo = data.streams[i].channel.logo;</div><div class="line"><span class="keyword">var</span> channel_name = data.streams[i].channel.status;</div><div class="line"><span class="keyword">var</span> display_name = data.streams[i].channel.display_name;</div><div class="line">$(<span class="string">'.row'</span>).append(</div><div class="line"><span class="string">'&lt;div class="broadcast"&gt;'</span> +</div><div class="line"><span class="string">'&lt;a href="'</span> + link + <span class="string">'" target="_blank"&gt;'</span> +</div><div class="line"><span class="string">'&lt;div class="channel"&gt;'</span> +</div><div class="line"><span class="string">'&lt;img src="'</span> + preview +<span class="string">'"&gt;'</span> +</div><div class="line"><span class="string">'&lt;/div&gt;'</span> +</div><div class="line"><span class="string">'&lt;div class="twitcher"&gt;'</span> +</div><div class="line"><span class="string">'&lt;div class="pic_box"&gt;'</span> +</div><div class="line"><span class="string">'&lt;img src="'</span> + logo + <span class="string">'"&gt;'</span> +</div><div class="line"><span class="string">'&lt;/div&gt;'</span> +</div><div class="line"><span class="string">'&lt;div class="info"&gt;'</span> +</div><div class="line"><span class="string">'&lt;div class="twitch_channel"&gt;'</span> + channel_name + <span class="string">'&lt;/div&gt;'</span> +</div><div class="line"><span class="string">'&lt;div class="twitcher_name"&gt;'</span> + display_name + <span class="string">'&lt;/div&gt;'</span> +</div><div class="line"><span class="string">'&lt;/div&gt;'</span> +</div><div class="line"><span class="string">'&lt;/div&gt;'</span> +</div><div class="line"><span class="string">'&lt;/a&gt;'</span> +</div><div class="line"><span class="string">'&lt;/div&gt;'</span></div><div class="line">);</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;);</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;抓了五項我想要的資料’(link,preview,logo,channel_name,display_name)’後，就用串字串的方式輸出給HTML，看一下最後的成果<br><img src="/2017/09/17/feic4/screenshot4.jpg" alt="screenshot4.jpg" title=""></p><p>&emsp;&emsp;做出來的成就感其實蠻高的，不過感覺還有很多可以優化和修改的地方，再來就是和胡立老師的做法做比對學習了! 最後就分享一下我hw4的程式 <a href="https://github.com/guachikuo/website_project/tree/master/hw4" target="_blank" rel="external">hw4_github</a>，我也還只是新手，可能中間其實有很多錯誤，還請指教!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;這次的作業是我一直很想學的東西，利用jQuery的AJAX(Asychronous Javascript and XML)去跟api串接資料，簡單說就是去提供API的地方抓資料來給自己開發。 AJAX這個名詞算是聽過很多次，這次總算要實際去學，內心是非常興奮。 &lt;/p&gt;
&lt;h4 id=&quot;作業四的Github連結-從假資料到真資料：Ajax-與-API-串接&quot;&gt;&lt;a href=&quot;#作業四的Github連結-從假資料到真資料：Ajax-與-API-串接&quot; class=&quot;headerlink&quot; title=&quot;作業四的Github連結: 從假資料到真資料：Ajax 與 API 串接&quot;&gt;&lt;/a&gt;作業四的Github連結: &lt;a href=&quot;https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw4.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;從假資料到真資料：Ajax 與 API 串接&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;這次作業要抓的資料，是要從Twitch裡抓取，至於API則是選擇&lt;a href=&quot;https://dev.twitch.tv/docs/v5/reference/streams#get-live-streams&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Get Live Streams&lt;/a&gt;。不過在抓資料前，需要先跟他們申請拿到&lt;code&gt;client_id&lt;/code&gt;，不然他們是不會給你資料的，至於怎麼申請，網站裡有說明!&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frontend Intermediate Course 2 &amp; 3 (二)</title>
    <link href="http://guachikuo.github.io/2017/09/16/feic2-3-2/"/>
    <id>http://guachikuo.github.io/2017/09/16/feic2-3-2/</id>
    <published>2017-09-16T10:35:16.000Z</published>
    <updated>2017-09-17T08:20:16.065Z</updated>
    
    <content type="html"><![CDATA[<h4 id="作業三的Github連結-寫-CSS-必備神器：CSS-預處理器"><a href="#作業三的Github連結-寫-CSS-必備神器：CSS-預處理器" class="headerlink" title="作業三的Github連結: 寫 CSS 必備神器：CSS 預處理器"></a>作業三的Github連結: <a href="https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw3.md" target="_blank" rel="external">寫 CSS 必備神器：CSS 預處理器</a></h4><p>這個作業就很好玩了，需要我們去學CSS預處理器(CSS Preprocessor)，目前最常見的就三個</p><ol><li><a href="http://sass-lang.com/" target="_blank" rel="external">Sass</a> 要run Sass的話需要去下載Ruby</li><li><a href="http://lesscss.org/" target="_blank" rel="external">Less</a> 它是用Javascript寫的，所以需要去下載Node.js</li><li><a href="http://stylus-lang.com/" target="_blank" rel="external">Stylus</a> 也是需要Node.js，相較於前面兩個是比較新的</li></ol><p>最後我選擇了Less，因為我自己已經有Node.js，Less也相對比Stylus較多人在用<br><a id="more"></a><br><strong>用完感想: 用過就會發現preprocessor的好</strong><br>&emsp;&emsp;可以省去自己寫css的很多麻煩，比如有個css是這樣，我希望test2的div大小是test的四分之一，當我hover，寬就長大跟test一樣寬。<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.test</span>&#123;</div><div class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line"><span class="attribute">height</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.test</span> <span class="selector-class">.test2</span>&#123;</div><div class="line"><span class="attribute">width</span>:<span class="number">50px</span>;</div><div class="line"><span class="attribute">height</span>:<span class="number">50px</span>;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.test</span> <span class="selector-class">.test2</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line"><span class="attribute">width</span>:<span class="number">100px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;會發現我需要一直重複打parent的class name，然後一直重複打雷同的寬高。 這時候如果先透過preprocessor就可以看出顯著的方便性!<br>例如Less的副檔名是<code>.less</code>，我就可以直接這樣寫一個test.less<br><figure class="highlight less"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div></pre></td><td class="code"><pre><div class="line"><span class="variable">@default_w :</span> <span class="number">100</span>;</div><div class="line"><span class="variable">@default_h :</span> <span class="number">100</span>;</div><div class="line"></div><div class="line"><span class="selector-class">.test</span>&#123;</div><div class="line"><span class="attribute">width</span>: <span class="variable">@default_w</span> px;</div><div class="line"><span class="attribute">height</span>:<span class="variable">@default_h</span> px;</div><div class="line"><span class="selector-class">.test2</span>&#123;</div><div class="line"><span class="attribute">width</span>: <span class="variable">@default_w</span>/<span class="number">2</span> px;</div><div class="line"><span class="attribute">height</span>: <span class="variable">@default_h</span>/<span class="number">2</span> px;</div><div class="line"></div><div class="line"><span class="selector-tag">&amp;</span><span class="selector-pseudo">:hover</span>&#123;</div><div class="line"><span class="attribute">width</span>: <span class="variable">@default_w</span> px;</div><div class="line">&#125;</div><div class="line">&#125;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;之後在terminal上打上<code>lessc test.less test.css</code>它就會編譯成上面css的樣子，好處是我像寫code一樣直接巢狀往下寫，而且當我要改變div test的大小我直接改變變數即可，不用像css一樣一個一個慢慢修，自己用過的感覺真的非常愛!</p><p>&emsp;&emsp;學到新東西的心情就非常好，最後就分享一下我hw2和hw3的程式 <a href="https://github.com/guachikuo/website_project/tree/master/hw2&amp;hw3" target="_blank" rel="external">hw2&amp;hw3_github</a><br>這只是我學習過程的紀錄而已，絕對不是正解，我也還在學習，可能錯誤還是很多，還請指教!</p>]]></content>
    
    <summary type="html">
    
      &lt;h4 id=&quot;作業三的Github連結-寫-CSS-必備神器：CSS-預處理器&quot;&gt;&lt;a href=&quot;#作業三的Github連結-寫-CSS-必備神器：CSS-預處理器&quot; class=&quot;headerlink&quot; title=&quot;作業三的Github連結: 寫 CSS 必備神器：CSS 預處理器&quot;&gt;&lt;/a&gt;作業三的Github連結: &lt;a href=&quot;https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw3.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;寫 CSS 必備神器：CSS 預處理器&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;這個作業就很好玩了，需要我們去學CSS預處理器(CSS Preprocessor)，目前最常見的就三個&lt;/p&gt;
&lt;ol&gt;
&lt;li&gt;&lt;a href=&quot;http://sass-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Sass&lt;/a&gt; 要run Sass的話需要去下載Ruby&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://lesscss.org/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Less&lt;/a&gt; 它是用Javascript寫的，所以需要去下載Node.js&lt;/li&gt;
&lt;li&gt;&lt;a href=&quot;http://stylus-lang.com/&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Stylus&lt;/a&gt; 也是需要Node.js，相較於前面兩個是比較新的&lt;/li&gt;
&lt;/ol&gt;
&lt;p&gt;最後我選擇了Less，因為我自己已經有Node.js，Less也相對比Stylus較多人在用&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frontend Intermediate Course 2 &amp; 3 (一)</title>
    <link href="http://guachikuo.github.io/2017/09/16/feic2-3/"/>
    <id>http://guachikuo.github.io/2017/09/16/feic2-3/</id>
    <published>2017-09-16T09:00:53.000Z</published>
    <updated>2017-09-17T08:20:15.335Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;這兩次的課程比較簡單，我就一次把它們完成，不過分兩篇寫。</p><h4 id="作業二的Github連結-讓畫面變得更動態：神奇的-CSS-transition"><a href="#作業二的Github連結-讓畫面變得更動態：神奇的-CSS-transition" class="headerlink" title="作業二的Github連結: 讓畫面變得更動態：神奇的 CSS transition"></a>作業二的Github連結: <a href="https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw2.md" target="_blank" rel="external">讓畫面變得更動態：神奇的 CSS transition</a></h4><p>&emsp;&emsp;這個作業希望我們利用CSS的<code>transition</code>讓單調的html活潑起來。 目標是hover每個方塊時，希望讓這些broadcast的陰影有浮動出來的效果，以及讓整個方塊變亮。 也因為需要有漸變的感覺，所以必須使用<code>transition</code>。<br><a id="more"></a></p><ol><li>浮動出來: 只要利用<code>box-shadow</code>即可。</li><li>方塊變亮: 我們也只需要利用<code>filter:brightness(150%);</code>就完成了!</li></ol><p>再來利用transition讓他們有漸變的動畫:<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.broadcast</span> &#123;</div><div class="line">  <span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line">  <span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</div><div class="line">  <span class="attribute">transition</span>: filter <span class="number">0.5s</span>, box-shadow <span class="number">0.5s</span>;</div><div class="line">  <span class="attribute">transition-delay</span>: <span class="number">0s</span>;</div><div class="line">&#125;</div><div class="line"><span class="selector-class">.broadcast</span><span class="selector-pseudo">:hover</span> &#123;</div><div class="line">  <span class="attribute">box-shadow</span>: <span class="number">3px</span> <span class="number">3px</span> <span class="number">10px</span> <span class="number">3px</span> <span class="number">#000000</span>;</div><div class="line">  <span class="attribute">filter</span>: <span class="built_in">brightness</span>(150%);</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;我讓filter和box-shadow的動畫過程花0.5秒。delay的意思是當我hover過去時，它會隔幾秒才會開始動畫，我暫時設成0s直接變化，到這邊基本上hw2就完成了!</p><h4 id="成果"><a href="#成果" class="headerlink" title="成果:"></a>成果:</h4><h5 id="Hover前"><a href="#Hover前" class="headerlink" title="Hover前"></a>Hover前</h5><img src="/2017/09/16/feic2-3/screenshot1.jpg" alt="hover前" title="hover前"> <h5 id="Hover後"><a href="#Hover後" class="headerlink" title="Hover後"></a>Hover後</h5><img src="/2017/09/16/feic2-3/screenshot2.jpg" alt="hover後" title="hover後">]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;這兩次的課程比較簡單，我就一次把它們完成，不過分兩篇寫。&lt;/p&gt;
&lt;h4 id=&quot;作業二的Github連結-讓畫面變得更動態：神奇的-CSS-transition&quot;&gt;&lt;a href=&quot;#作業二的Github連結-讓畫面變得更動態：神奇的-CSS-transition&quot; class=&quot;headerlink&quot; title=&quot;作業二的Github連結: 讓畫面變得更動態：神奇的 CSS transition&quot;&gt;&lt;/a&gt;作業二的Github連結: &lt;a href=&quot;https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw2.md&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;讓畫面變得更動態：神奇的 CSS transition&lt;/a&gt;&lt;/h4&gt;&lt;p&gt;&amp;emsp;&amp;emsp;這個作業希望我們利用CSS的&lt;code&gt;transition&lt;/code&gt;讓單調的html活潑起來。 目標是hover每個方塊時，希望讓這些broadcast的陰影有浮動出來的效果，以及讓整個方塊變亮。 也因為需要有漸變的感覺，所以必須使用&lt;code&gt;transition&lt;/code&gt;。&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
  <entry>
    <title>Frontend Intermediate Course 1</title>
    <link href="http://guachikuo.github.io/2017/09/15/feic1/"/>
    <id>http://guachikuo.github.io/2017/09/15/feic1/</id>
    <published>2017-09-15T06:19:18.000Z</published>
    <updated>2017-09-17T08:22:40.794Z</updated>
    
    <content type="html"><![CDATA[<p>&emsp;&emsp;給自己訂一個目標，想要在找工作這段時間，<strong>自己寫出一個簡單的網站</strong>，運氣也很好的在ptt看到胡立老師之前開了一個免費的課程，雖然之前沒機會參加，便還是決定從這裡下手，直接邊做邊學。 課程 <a href="https://github.com/aszx87410/frontend-intermediate-course" target="_blank" rel="external">Frontend Intermediate Course</a> 總共有十堂，每堂老師都有訂定一個這次要完成的目標，跟提供一些參考資料。<br>&emsp;&emsp;我的目標就是自己想盡辦法寫出一遍出來，然後再去看課程youtube做比較以及修正!<br><a id="more"></a></p><hr><h4 id="作業一的Github連結-基本-HTML-CSS-練習：以-Twitch-為例"><a href="#作業一的Github連結-基本-HTML-CSS-練習：以-Twitch-為例" class="headerlink" title="作業一的Github連結: 基本 HTML/CSS 練習：以 Twitch 為例"></a>作業一的Github連結: <a href="https://github.com/aszx87410/frontend-intermediate-course/blob/master/homeworks/hw1.md" target="_blank" rel="external">基本 HTML/CSS 練習：以 Twitch 為例</a></h4><p>這個作業就是基本的使用HTML和CSS，去呈現這個樣子<br><img src="/2017/09/15/feic1/hw1_demo.png" alt="hw1_demo.png" title=""><br>圖片來源: (課程裡胡立老師的圖)</p><p>&emsp;&emsp;每個方塊做好，其實複製九個出來就可以了，不過最讓我傷腦筋的就是排版。雖然作業沒有要求RWD，但是我自己希望從一開始就達到RWD的效果，不然之後再改也很麻煩，所以不管是置中的問題，還是達到RWD的效果，確實花了點時間(自己有一段時間沒碰過HTML/CSS)。<br>作業規定每個方塊寬是300px，每行三個，總共三行九個。 看完<a href="https://internetingishard.com/html-and-css/floats" target="_blank" rel="external">Floats</a>後，我開始大量使用<code>float</code>。 </p><ol><li>利用<code>float:left;</code>，再去調整<code>margin</code>的比例去達到每行符合三個方塊的大小。</li><li>方塊下面的圓圖配合文字也用這個方式，文字如果overflow就<code>overflow:hidden;</code></li></ol><p>但是這個方法真的很難調整，不管是置中還是條間距，我自己也弄得不是很愛。</p><p>&emsp;&emsp;後來再往下看就看到了<a href="https://internetingishard.com/html-and-css/flexbox/" target="_blank" rel="external">FlexBox</a>，發現flex在左右跟上下置中，比起之前用margin來的準確而且方便。我用兩層div去包九個broadcast<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div><div class="line">3</div><div class="line">4</div><div class="line">5</div><div class="line">6</div><div class="line">7</div><div class="line">8</div><div class="line">9</div><div class="line">10</div><div class="line">11</div><div class="line">12</div><div class="line">13</div><div class="line">14</div><div class="line">15</div><div class="line">16</div></pre></td><td class="code"><pre><div class="line"><span class="selector-class">.container</span>&#123;</div><div class="line"><span class="attribute">display</span>: flex;</div><div class="line">  <span class="attribute">justify-content</span>: center;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.row</span>&#123;</div><div class="line"><span class="attribute">width</span>: <span class="number">1000px</span>;</div><div class="line"><span class="attribute">display</span>: flex;</div><div class="line"><span class="attribute">flex-wrap</span>: wrap;</div><div class="line"><span class="attribute">justify-content</span>: space-around;</div><div class="line">&#125;</div><div class="line"></div><div class="line"><span class="selector-class">.broadcast</span>&#123;</div><div class="line"><span class="attribute">width</span>: <span class="number">300px</span>;</div><div class="line"><span class="attribute">margin-bottom</span>: <span class="number">30px</span>;</div><div class="line">&#125;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;用了覺得調整方便很多，先用<code>div container</code>去置中，<code>div row</code>寬度設1000px，再用<code>justify-cotent: space-around;</code>等距排列broadcast，那因為broadcast的寬度只有300px，所以一行最多只能放三個，如果超過:<code>flex-wrap:wrap</code>往下一行擺。 這樣完成後左右距離調整好了，但是會發現上下黏在一起<br><img src="/2017/09/15/feic1/screenshot1.jpg" alt="screenshot1.jpg" title=""><br>&emsp;&emsp;解決方法很簡單，就跟上面一樣在broadcast中加上<code>margin-bottom: 30px;</code>。</p><p>&emsp;&emsp;後來聽說用<code>grid</code>可能更方便，準備來研究一下<a href="https://css-tricks.com/snippets/css/complete-guide-grid/" target="_blank" rel="external">A Complete Guide to Grid</a></p><p>&emsp;&emsp;作業要求文字overflow時，需顯示 … ，如果只是一般的<code>overflow:hidden</code>，它就是直接讓文字消失。處理方式很簡單在css上面加上這串，它就會變成 … 了!<br><figure class="highlight css"><table><tr><td class="gutter"><pre><div class="line">1</div><div class="line">2</div></pre></td><td class="code"><pre><div class="line"><span class="selector-tag">white-space</span>: <span class="selector-tag">nowrap</span>;</div><div class="line"><span class="selector-tag">text-overflow</span>: <span class="selector-tag">ellipsis</span>;</div></pre></td></tr></table></figure></p><p>&emsp;&emsp;因為自己真的一段時間沒碰過HTML/CSS，所以花了不少時間在重新回憶，慶幸的是還是把它寫出來了:)<br><img src="/2017/09/15/feic1/screenshot2.jpg" alt="screenshot2.jpg" title=""></p><p>&emsp;&emsp;最後就分享一下我的程式 <a href="https://github.com/guachikuo/website_project/tree/master/hw1" target="_blank" rel="external">hw1_github</a>，這只是我學習過程的紀錄而已，絕對不是正解，我也還在學習，可能錯誤還是很多，還請指教!</p>]]></content>
    
    <summary type="html">
    
      &lt;p&gt;&amp;emsp;&amp;emsp;給自己訂一個目標，想要在找工作這段時間，&lt;strong&gt;自己寫出一個簡單的網站&lt;/strong&gt;，運氣也很好的在ptt看到胡立老師之前開了一個免費的課程，雖然之前沒機會參加，便還是決定從這裡下手，直接邊做邊學。 課程 &lt;a href=&quot;https://github.com/aszx87410/frontend-intermediate-course&quot; target=&quot;_blank&quot; rel=&quot;external&quot;&gt;Frontend Intermediate Course&lt;/a&gt; 總共有十堂，每堂老師都有訂定一個這次要完成的目標，跟提供一些參考資料。&lt;br&gt;&amp;emsp;&amp;emsp;我的目標就是自己想盡辦法寫出一遍出來，然後再去看課程youtube做比較以及修正!&lt;br&gt;
    
    </summary>
    
    
  </entry>
  
</feed>
